program         : decl* EOF ;

decl            : class_decl
                | fun_decl
                | var_decl
                | stmt ;

class_decl      : "class" IDENT ( "<" IDENT )? "{" ( static_fun | getter | function )* "}" ;
fun_decl        : "fun" function* ;
var_decl        : "var" IDENT ( "=" expr )? ";"

static_fun      : "static" function ;
function        : IDENT funbody ;
funbody         : "(" params? ")" block ;
params          : IDENT ( "," IDENT )* ;
// 'assignment' here will skip comma expression, since those can't appear in function arguments
funargs         : assignment ( "," assignment )* ;

getter          : IDENT block ;


stmt            : expr_stmt
                | for_stmt
                | if_stmt
                | print_stmt
                | return_stmt
                | while_stmt
                | break_stmt
                | block ;

expr_stmt       : expr ";" ;
for_stmt        : "for" "(" ( var_decl | expr_stmt | ";" )
                              expr? ";"
                              expr? ")" stmt ;
if_stmt         : "if" "(" expr ")" stmt ( "else" stmt )? ;
print_stmt      : "print" expr ";" ;
return_stmt     : "return expr? ";" ;
while_stmt      : "while" "(" expr ")" stmt ;
break_stmt      : "break" ;
block           : "{" decl* "}" ;

expr            : comma ;
comma           : assignment "," assignment ;
assignment      : ( call "." )? IDENT "=" assignment | logic_or ;
logic_or        : logic_and ( "or" logic_and )* ;
logic_and       : equality ( "and" equality )* ;
equality        : comparison ( ( "!=" | "==" ) comparison )* ;
comparison      : term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term            : factor ( ( "-" | "+" | "&" | "|" ) factor )* ;
factor          : unary ( ( "/" | "*" ) unary )* ;
unary           : ( "!" | "-" ) unary | call ;
call            : lambda ( "(" funargs? ")" | "." IDENT )* ;
lambda          : primary | "fun" funbody ;
primary         : "true" | "false" | "nil" | "this"
                | NUMBER | STRING | IDENT | "(" expr ")"
                | "super" "." IDENT ;

NUMBER          : DIGIT+ ( "." DIGIT+ )? ;
STRING          : "\"" <any char except "\"">* "\"" ;
IDENT           : ALPHA ( ALPHA | DIGIT )* ;
ALPHA           : "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT           : "0" ... "9" ;


